C51 COMPILER V9.01   FILTER                                                                06/25/2018 15:28:30 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FILTER
OBJECT MODULE PLACED IN .\obj\Filter.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE scr\Filter.c OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\Filter
                    -.lst) OBJECT(.\obj\Filter.obj)

line level    source

   1          /*--------------------------------文*件*信*息-----------------------------
   2          * 文件名：  Filter.c
   3          * 版　本：  v1.0
   4          * 描  述：  滤波函数   100T双轴 整合后的版本
   5          * 创建人：   
   6          * 日  期：   
   7          --------------------------------------------------------------------------
   8          *当前版本:      v1.0
   9          *修 改 人:
  10          *日　  期:
  11          ----------------------------------修改履历--------------------------------
  12          1、
  13          2、
  14          3、
  15          4、
  16          ------------------------------------------------------------------------*/
  17          #include "Filter.h"
  18          
  19          //***********************************************************************/
  20          // *功    能：限幅滤波
  21          // *入    口：old_val，前一次的值；new_val，新值；range，范围
  22          // *出    口：当新值在幅度内事返回1，否则返回0
  23          // *备    注：幅度为old_val-range<new_val<old_val+range
  24          // *函数性质：
  25          //***********************************************************************/
  26          int8u ValInRange(int16u old_val,int16u new_val,int16u range)
  27          {
  28   1                      if((new_val>(old_val+range))||((new_val+range)<old_val))
  29   1                              return 0;
  30   1                      else
  31   1                              return 1;
  32   1      }
  33          //***********************************************************************/
  34          // *功    能：滑动窗口滤波
  35          // *入    口：pbufpos,缓存位置指针;pbufcnt,缓存中元素个数指针;pbuf,缓存指针;
  36          //                                              val,新值;ftcnt，窗口长度（元素个数）
  37          // *出    口：当窗口数据填满之后返回平均值，否则返回传入值
  38          // *备    注：保证ftcnt小于等于缓存指针所指向的数组的大小
  39          // *函数性质：
  40          //***********************************************************************/
  41          int16u SlideWinFilter (int8u *pbufpos, int8u *pbufcnt, int16u *pbuf, int16u val, int16u ftcnt)
  42          {
  43   1              int32u data_ram=0;
  44   1              int8u i;
  45   1              if(ftcnt<=*(pbufpos))
  46   1              {
  47   2                 *pbufpos=0;                          //20130619 hxl
  48   2              }       
  49   1      
  50   1              *(pbuf+*pbufpos)=val;                   //替换光标（位置）所在的元素
  51   1              (*pbufpos)++;                           //光标后移
  52   1      //      if(ftcnt==*(pbufpos))
  53   1      //              *pbufpos=0;                             //光标到达窗口末尾，重新回到起始位置
  54   1              if((*pbufcnt)!=ftcnt)
C51 COMPILER V9.01   FILTER                                                                06/25/2018 15:28:30 PAGE 2   

  55   1              {       
  56   2                      (*pbufcnt)++;                           //窗口数据未满
  57   2                      return val;
  58   2              }
  59   1              else 
  60   1              {
  61   2                      for(i=0;i<ftcnt;i++)
  62   2                      {       
  63   3                              data_ram+=*(pbuf+i);
  64   3                      }
  65   2                      data_ram=data_ram/ftcnt;
  66   2                      return ((int16u)data_ram);                      
  67   2              }
  68   1      }
  69          //***********************************************************************/
  70          // *功    能：一阶滤波
  71          // *入    口：old_val，前一次滤波值；new_val，新值；filtercnt，滤波系数
  72          // *出    口：一阶滤波计算后的值
  73          // *备    注：0<filtercnt<256
  74          // *函数性质：
  75          //***********************************************************************/
  76          
  77          float Filter_1st (float old_val,int16u new_val, int8u filtercnt)
  78          {       
  79   1              return ((old_val*(filtercnt-1)+new_val)/filtercnt);
  80   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    348    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
