C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN .\obj\Flash.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE scr\Flash.c OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\Flash.l
                    -st) OBJECT(.\obj\Flash.obj)

line level    source

   1          /*--------------------------------文*件*信*息-----------------------------
   2          * 文件名：  Flash.c
   3          * 版　本：  v1.0
   4          * 描  述：  100T双轴 整合后的版本
   5          * 创建人：   
   6          * 日  期：   
   7          --------------------------------------------------------------------------
   8          *当前版本:      v1.0
   9          *修 改 人:
  10          *日　  期:
  11          ----------------------------------修改履历--------------------------------
  12          1、
  13          2、
  14          3、
  15          4、
  16          ------------------------------------------------------------------------*/
  17          #define   __FLASH_C__
  18          #include  "_Include.h"
  19          /***********************************************************************/
  20          static void Ram_CalDataInit (void);
  21          static void Ram_CalData2Buf (int8u);
  22          static void Ram_Buf2CalData (int8u);
  23          static void FlashArea_User (void) ;
  24          static int8u Flash_CheckSum (int8u *addr,int16u n);
  25          static int8u FlashChk (void);
  26          static  void  Ram_CalDataInit_User(void);
  27          static  void Flash_PageErase (int16u addr);
  28          static  void Flash_BufWr (int16u addr,char* buf,int16u n);
  29          static  void Flash_BufRd (int16u addr,char* buf,int16u n);
  30          static  void FlashUpdate (int16u addr,int8u* buf,int16u n);
  31          static  void Flash_CalDataUpdate_User (int8u page,int16u addr,int8u* buf,int16u n);
  32          
  33          //***********************************************************************/
  34          // *功    能：Flash calibrate Init 校准数据初始化
  35          // *入    口：
  36          // *出    口：
  37          // *备    注：
  38          // *函数性质：
  39          //***********************************************************************/
  40          void Flash_CalDataInit (void)
  41          {
  42   1          int8u SfrPage_ = SFRPAGE;
  43   1          Flash_BufRd(FLASH_SYS,DispBuf,FLASH_BUF_NUM);               //Reading Form FLASH_SYS 读系统数据
  44   1          if(OK != FlashChk())                                        //判断校验字 0x85
  45   1          {
  46   2              Ram_CalDataInit();                                      //内存数据初始化
  47   2              Flash_CalDataUpdate();                                  //将内存的数据Update到Flash
  48   2          }
  49   1          else
  50   1          {
  51   2              Ram_Buf2CalData(1);                                     //将读出的系统数据保存到相关内存
  52   2              Flash_BufRd(FLASH_TEMP,DispBuf,FLASH_BUF_NUM);          //Reading Form FLASH_USER 读临时数据
  53   2              if((OK != FlashChk())||(DispBuf[1] != Flash_CheckSum((int8u*)(&DispBuf[2]),(FLASH_BUF_NUM-2))))
  54   2              {
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 2   

  55   3                 FlashArea_User();                                    //判断USER区域
  56   3              }
  57   2              else
  58   2              {
  59   3                  Flash_BufRd(FLASH_USER,DispBuf,FLASH_BUF_NUM);      //取出用户区域的数据
  60   3                  if((OK != FlashChk())||(DispBuf[1] != Flash_CheckSum((int8u*)(&DispBuf[2]),(FLASH_BUF_NUM-2)))
             -)
  61   3                  {
  62   4                     Flash_BufRd(FLASH_TEMP,DispBuf,FLASH_BUF_NUM);
  63   4                     Ram_Buf2CalData(2);                              //读出临时区域的数据保存到相关内存
  64   4                     Flash_CalDataUpdate_User (2,FLASH_USER,&DispBuf[0],FLASH_BUF_NUM);      
  65   4                  }                                                                                                    //USER的数据异常则 将TEMP 的数据 UPDATE 到USER 区域            
  66   3                  else
  67   3                  {
  68   4                      Flash_BufRd(FLASH_TEMP,DispBuf,FLASH_BUF_NUM);
  69   4                      Ram_Buf2CalData(2);                             //读出临时区域的数据保存到相关内存
  70   4                  }
  71   3               }
  72   2      
  73   2            }
  74   1      
  75   1          ACalXId=GetAngXCalCnt();                                    //获取x轴校准点
  76   1          ACalYId=GetAngYCalCnt();                                    //获取y轴校准点  
  77   1      
  78   1          MenuId=MOD_X_CAL;
  79   1          Adc_XCalStop();                                              //通过读Flash的数据调用校准结束函数 算出A
             -,K
  80   1      
  81   1          MenuId=MOD_Y_CAL;
  82   1          Adc_YCalStop();
  83   1      
  84   1      
  85   1              MainTime4Cnt = SendSpeed[SendSpeedNum];                                          
  86   1      
  87   1          SFRPAGE = CONFIG_PAGE;
  88   1          SBRL0   = -(SYSCLK / Braud[Braud_Num] / 2);                 //设置波特率   SFRPAGE=0x0F     SBRL0 = -(SYS
             -CLK / BAUDRATE / 2);
  89   1          SFRPAGE = SfrPage_;
  90   1      }
  91          //***********************************************************************/
  92          // *功    能：Flash Update
  93          // *入    口：
  94          // *出    口：
  95          // *备    注： 系统用户命令 对应此操作
  96          // *函数性质：
  97          //***********************************************************************/
  98          void Flash_CalDataUpdate (void)
  99          {
 100   1          Ram_CalData2Buf(1);
 101   1          FlashUpdate(FLASH_SYS,&DispBuf[0],FLASH_BUF_NUM);          //存系统参数到Flash
 102   1          Ram_CalData2Buf(2);                                        //存用户参数到Flash
 103   1          FlashUpdate(FLASH_USER,&DispBuf[0],FLASH_BUF_NUM);
 104   1          FlashUpdate(FLASH_TEMP,&DispBuf[0],FLASH_BUF_NUM);
 105   1      }
 106          void Flash_UserDataUpdate(void)
 107          {
 108   1      
 109   1          Flash_CalDataUpdate_User (2,FLASH_TEMP,&DispBuf[0],FLASH_BUF_NUM);  
 110   1          Flash_CalDataUpdate_User (2,FLASH_USER,&DispBuf[0],FLASH_BUF_NUM);  
 111   1      
 112   1      }
 113          //***********************************************************************/
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 3   

 114          void FlashUpdate (int16u addr,int8u* buf,int16u n)
 115          {
 116   1          bit  ea_temp = EA;
 117   1          EA    = 0;
 118   1      
 119   1          Flash_PageErase(addr);
 120   1          delay_ms(250);
 121   1          Flash_BufWr(addr,buf,n);
 122   1      
 123   1          EA = ea_temp;
 124   1      }
 125          
 126          //***********************************************************************/
 127          // *功    能：
 128          // *入    口：
 129          // *出    口：
 130          // *备    注： Update Flash User/Temp
 131          // *函数性质：
 132          //***********************************************************************/
 133          void  Flash_CalDataUpdate_User (int8u page,int16u addr,int8u* buf,int16u n)
 134          {
 135   1      
 136   1          int8u sum;
 137   1          char code * data pread;                                 // FLASH read pointer
 138   1          pread = (char code *)(addr+1);
 139   1      
 140   1          sum = *pread;                                           // 取出FLASH 中的CheckSum
 141   1          Ram_CalData2Buf(page);                                  // 将参数保存到缓存区
 142   1      
 143   1          if(sum == DispBuf[1])return;                            // 判断前后的CheckSum 是否相等
 144   1          FlashUpdate(addr,buf,n);
 145   1      }
 146          //***********************************************************************/
 147          // *功    能：
 148          // *入    口：
 149          // *出    口：
 150          // *备    注：
 151          // *函数性质：
 152          //***********************************************************************/
 153          static void Ram_CalDataInit (void)
 154          {
 155   1          AngCalDataInit();                                                                   //角度校准数据初始化
 156   1      }
 157          //************************将校准数据存到缓存区***********************************************/
 158          static void Ram_CalData2Buf (int8u page)
 159          {   int8u i;
 160   1              int16u j;
 161   1          int16u k;
 162   1          if(page==1)                                               
 163   1          {
 164   2              for(i=0;i<ANG_CAL_NUM;i++)
 165   2              {
 166   3      
 167   3                  *((int32s*)&DispBuf[i*12+2]) = GetAngXCalAngVal(i);
 168   3                  *((int32s*)&DispBuf[i*12+6]) = GetAngYCalAngVal(i);
 169   3                  *((int16u*)&DispBuf[i*12+10]) = GetAngXCalAdcVal(i);
 170   3                  *((int16u*)&DispBuf[i*12+12]) = GetAngYCalAdcVal(i);                         
 171   3      
 172   3              }
 173   2                      j=ANG_CAL_NUM*12+FLASH_CK_NUM;
 174   2              for(i=0;i<SystemVerNum;i++)
 175   2              {
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 4   

 176   3                *((int8u*)&DispBuf[j+i]) = SystemVer[i];
 177   3              }
 178   2      
 179   2              j=j+SystemVerNum;
 180   2      
 181   2              *((int8u*)&DispBuf[j+0])  = GetAngXCalCnt();   //角度校准点数可设   
 182   2             
 183   2              *((int16u*)&DispBuf[j+1])  = AngRange;
 184   2      
 185   2      
 186   2              *((int32s*)&DispBuf[j+3])  = GetAngXSysZero();   //X相对测量角度(内部清零）
 187   2              *((int32s*)&DispBuf[j+7])  = GetAngYSysZero();   //y相对测量角度(内部清零）
 188   2      
 189   2              k=j+11;
 190   2              for(;k<FLASH_BUF_NUM;k++)
 191   2              {
 192   3                  DispBuf[k]=0;
 193   3              }                                                                       //剩余的 都置0
 194   2      
 195   2              DispBuf[0] = FLASH_DATA_CHK;
 196   2              DispBuf[1] = Flash_CheckSum((int8u*)(&DispBuf[2]),(FLASH_BUF_NUM-2));   //计算CheckSum 
 197   2          }
 198   1          else if(2==page)                                                            
 199   1          {
 200   2              *((int8u*)&DispBuf[2]) = SendActPosi;                                   //主动发送OR应答发送
 201   2              *((int8u*)&DispBuf[3]) = SendSpeedNum;                                  //主动发送速度
 202   2              *((int8u*)&DispBuf[4])  = Braud_Num;                                                            //波特率
 203   2              *((int8u*)&DispBuf[5])  = GetFilterCnt();                                                       //滤波系数
 204   2      
 205   2              j = 6;
 206   2      
 207   2              *((int32s*)&DispBuf[j+0])  = GetAngXUsrZero() ;                         //X相对测量角度(用户清零）
 208   2              *((int32s*)&DispBuf[j+4]) = GetAngYUsrZero() ;                          //Y相对测量角度(用户清零）
             -   
 209   2      
 210   2              *((int32s*)&DispBuf[j+8]) = GetAngXInst() ;                             //X安装角度
 211   2              *((int32s*)&DispBuf[j+12]) = GetAngYInst();                             //Y安装角度
 212   2      
 213   2      
 214   2                      *((int8u*)&DispBuf[j+16]) = Addr;
 215   2      
 216   2                      k=j+17+32;                                                                                                                              //      预留32个空间追加新的变量
 217   2              for(;k<FLASH_BUF_NUM;k++)
 218   2              {
 219   3                  DispBuf[k]=0;
 220   3              }
 221   2      
 222   2      
 223   2              DispBuf[0] = FLASH_DATA_CHK;
 224   2              DispBuf[1] = Flash_CheckSum((int8u*)(&DispBuf[2]),(FLASH_BUF_NUM-2));       
 225   2          }
 226   1      }
 227          
 228          
 229          //**************************************************************************/
 230          //**************************将缓存区的数据存到内存DispBuf to Ram ************/
 231          //**************************************************************************/
 232          static void Ram_Buf2CalData (int8u page)
 233          {   int8u i;
 234   1              int16u j;
 235   1          if(1==page)
 236   1          {
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 5   

 237   2              for(i=0;i<ANG_CAL_NUM;i++)                                              
 238   2              {
 239   3                  SetAngXCalAngVal(*((int32s*)&DispBuf[i*12+2]),i);
 240   3                  SetAngYCalAngVal(*((int32s*)&DispBuf[i*12+6]),i);
 241   3                  SetAngXCalAdcVal(*((int16u*)&DispBuf[i*12+10]),i);
 242   3                  SetAngYCalAdcVal(*((int16u*)&DispBuf[i*12+12]),i);                  //
 243   3      
 244   3              }
 245   2                      j=ANG_CAL_NUM*12+FLASH_CK_NUM;
 246   2              for(i=0;i<SystemVerNum;i++)
 247   2              {
 248   3                SystemVer[i] = *((int8u*)&DispBuf[j+i]);
 249   3              }
 250   2      
 251   2      
 252   2              j=j+SystemVerNum;                                                                    
 253   2      
 254   2              SetAngCalCnt(*((int8u*)&DispBuf[j+0]));    //角度校准点数可设   
 255   2      
 256   2              AngRange = *((int16u*)&DispBuf[j+2]);           //测量范围
 257   2      
 258   2          }
 259   1          if(2==page)
 260   1          {
 261   2              SendActPosi         = *((int8u*)&DispBuf[2]);
 262   2              SendSpeedNum        = *((int8u*)&DispBuf[3]);
 263   2              Braud_Num                       = *((int8u*)&DispBuf[4]);                                                                       //波特率
 264   2              SetFilterCnt(*((int8u*)&DispBuf[5]));                                                                                           //滤波补尝点数可设
 265   2      
 266   2              j = 6;
 267   2      
 268   2              SetAngXUsrZero(*((int32s*)&DispBuf[j+0]));
 269   2              SetAngYUsrZero(*((int32s*)&DispBuf[j+4]));
 270   2      
 271   2              SetAngXInst(*((int32s*)&DispBuf[j+8]));
 272   2              SetAngYInst(*((int32s*)&DispBuf[j+12]));                                             //
 273   2                      Addr = *((int8u*)&DispBuf[j+0]) ;
 274   2              }
 275   1      }
 276          
 277          
 278          //************************* CHECKSUM *************************************/
 279          static int8u Flash_CheckSum (int8u *addr,int16u n)
 280          {   int8u * data pread;
 281   1          int16u i;
 282   1          int8u  sum=0;
 283   1          pread = addr;
 284   1          for(i=0;i<n;i++)
 285   1          {
 286   2            sum += *(pread++);
 287   2          }
 288   1          return(sum);
 289   1      }
 290          
 291          //***********************************************************************/
 292          // *功    能：页擦除
 293          // *入    口：
 294          // *出    口：
 295          // *备    注：
 296          // *函数性质：
 297          //***********************************************************************/
 298          static void Flash_PageErase (int16u addr)
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 6   

 299          {   char xdata * data pwrite;               // FLASH write pointer
 300   1          bit  ea_temp = EA;                      // Preserve EA
 301   1      
 302   1      
 303   1          pwrite = (char xdata *) addr;
 304   1          EA = 0;                                 // Disable interrupts
 305   1          VDM0CN = 0xA0;                          // Enable VDD monitor and high threshold
 306   1          RSTSRC = 0x02;                          // Enable VDD monitor as a reset source
 307   1          FLKEY  = 0xA5;                          // Key Sequence 1
 308   1          FLKEY  = 0xF1;                          // Key Sequence 2
 309   1          PSCTL |= 0x03;                          // PSWE = 1; PSEE = 1
 310   1          VDM0CN = 0xA0;                          // Enable VDD monitor and high threshold
 311   1          RSTSRC = 0x02;                          // Enable VDD monitor as a reset source
 312   1          *pwrite = 0;                            // Initiate page erase
 313   1          PSCTL  &= ~0x03;                        // PSWE = 0; PSEE = 0
 314   1          EA = ea_temp;                           // Restore interrupts
 315   1      }
 316          //***********************************************************************/
 317          // *功    能：Flash Write
 318          // *入    口：addr - valid range is from 0x0000 to 0x7DFE for 32K devices
 319          //            valid range is from 0x0000 to 0x3FFE for 16K devices
 320          // *出    口：
 321          // *备    注：
 322          // *函数性质：
 323          //***********************************************************************/
 324          static void Flash_BufWr (int16u addr,char* buf,int16u n)
 325          {   char xdata * data pwrite;               // FLASH write pointer
 326   1          bit  ea_temp = EA;                      // Preserve EA
 327   1          int16u i;
 328   1      
 329   1      
 330   1          pwrite = (char xdata *) addr;
 331   1          EA = 0;                                 // Disable interrupts
 332   1          for(i=0;i<n;i++)
 333   1          {   VDM0CN = 0xA0;                      // Enable VDD monitor and high threshold
 334   2              RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 335   2              FLKEY  = 0xA5;                      // Key Sequence 1
 336   2              FLKEY  = 0xF1;                      // Key Sequence 2
 337   2              PSCTL |= 0x01;                      // PSWE = 1 which enables writes
 338   2              VDM0CN = 0xA0;                      // Enable VDD monitor and high threshold
 339   2              RSTSRC = 0x02;                      // Enable VDD monitor as a reset source
 340   2              *pwrite++=*buf++;
 341   2              PSCTL &= ~0x01;                     // PSWE = 0 which disable writes
 342   2          }
 343   1          EA = ea_temp;                           // Restore interrupts
 344   1      }
 345          //***********************************************************************/
 346          // *功    能：Flash Read
 347          // *入    口：addr - valid range is from 0x0000 to 0x7DFE for 32K devices
 348          //            valid range is from 0x0000 to 0x3FFE for 16K devices
 349          // *出    口：
 350          // *备    注：
 351          // *函数性质：
 352          //***********************************************************************/
 353          static void Flash_BufRd (int16u addr,char* buf,int16u n)
 354          {   char code * data pread;                 // FLASH read pointer
 355   1          bit  ea_temp = EA;                      // Preserve EA
 356   1          int16u i;
 357   1      
 358   1          pread = (char code *) addr;
 359   1          EA    = 0;                              // Disable interrupts
 360   1          for(i=0;i<n;i++)
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 7   

 361   1          {
 362   2            *buf++ = *pread++;
 363   2          }
 364   1          EA = ea_temp;                           // Restore interrupts
 365   1      }
 366          
 367          //***********************************************************************/
 368          // *功    能：
 369          // *入    口：
 370          // *出    口：
 371          // *备    注：
 372          // *函数性质：
 373          //***********************************************************************/
 374          static int8u FlashChk (void)
 375          {   int8u temp;;
 376   1          temp = DispBuf[0];
 377   1          if( temp == FLASH_DATA_CHK)return OK;
 378   1          else
 379   1          return ERR;
 380   1      }
 381          
 382          //***********************************************************************/
 383          // *功    能：
 384          // *入    口：
 385          // *出    口：
 386          // *备    注：
 387          // *函数性质：
 388          //***********************************************************************/
 389          static void FlashArea_User (void)
 390          {
 391   1          Flash_BufRd(FLASH_USER,DispBuf,FLASH_BUF_NUM);                
 392   1          if((OK != FlashChk())||(DispBuf[1] != Flash_CheckSum((int8u*)(&DispBuf[2]),(FLASH_BUF_NUM-2))))
 393   1          {
 394   2            Ram_CalDataInit_User();                           //USER的CHK和CheckSum 有问题 则初始化 TEMP OR USER
             - 局域的数据
 395   2            Flash_CalDataUpdate_User (2,FLASH_TEMP,&DispBuf[0],FLASH_BUF_NUM);
 396   2            Flash_CalDataUpdate_User (2,FLASH_USER,&DispBuf[0],FLASH_BUF_NUM);
 397   2          }
 398   1          else
 399   1          {
 400   2             Ram_Buf2CalData(2);                              //将USER区域的数据存到内存
 401   2             Flash_CalDataUpdate_User (2,FLASH_TEMP,&DispBuf[0],FLASH_BUF_NUM);  
 402   2                                                                                                              //USER的CHK和CheckSum 都没有问题 将USER 的数据UPDATE 到TEMP 区域
 403   2          }
 404   1      
 405   1      }
 406          
 407          
 408          //***********************************************************************/
 409          // *功    能：
 410          // *入    口：
 411          // *出    口：
 412          // *备    注：
 413          // *函数性质：
 414          //***********************************************************************/
 415          
 416          static  void  Ram_CalDataInit_User(void)
 417          {
 418   1      
 419   1          SetAngXUsrZero(0);
 420   1          SetAngYUsrZero(0);  
 421   1          Init_SystemPara();
C51 COMPILER V9.01   FLASH                                                                 06/25/2018 15:28:30 PAGE 8   

 422   1      
 423   1      }
 424          
 425          
 426          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1594    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      52
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
